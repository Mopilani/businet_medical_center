import 'package:businet_medical_center/models/instruction_model.dart';
import 'package:businet_medical_center/models/lab/analysis_group_model.dart';
import 'package:businet_medical_center/models/lab/analysis_model.dart';
import 'package:businet_medical_center/models/lab/analysis_sample_model.dart';
import 'package:businet_medical_center/models/lab/analysis_sample_unit_model.dart';
import 'package:businet_medical_center/models/lab/analysis_sub_group_model.dart';
import 'package:businet_medical_center/models/lab/analysis_work_group_model.dart';
import 'package:businet_medical_center/models/lab/external_lab_model.dart';
import 'package:businet_medical_center/models/processes_model.dart';
import 'package:businet_medical_center/utils/updaters.dart';
import 'package:businet_medical_center/views/widgets/focusable_field.dart';
import 'package:businet_medical_center/views/widgets/spec_field.dart';
import 'package:flutter/material.dart';
import 'package:overlay_support/overlay_support.dart';
import 'package:updater/updater.dart' as updater;

class LabAnalysisListView extends StatefulWidget {
  const LabAnalysisListView({Key? key}) : super(key: key);

  @override
  State<LabAnalysisListView> createState() => _LabAnalysisListViewState();
}

class _LabAnalysisListViewState extends State<LabAnalysisListView> {
  List<AnalysisModel> models = [];
  // List<AnalysisGroupModel> groups = [];
  List<AnalysisGroupModel> analysisGroupModels = <AnalysisGroupModel>[];
  List<AnalysisSubGroupModel> analysisSubGroupModels = [];
  List<AnalysisWorkGroupModel> analysisWorkGroupModels = [];
  List<AnalysisSampleModel> analysisSampleModels = [];
  List<ExternalLabModel> externalLabModels = [];
  List<InstructionModel> instructionModels = [];
  List<AnalysisSampleUnitModel> analysisSampleUnitModels = [];

  TextEditingController idController = TextEditingController();
  TextEditingController descriptionController = TextEditingController();
  // AnalysisGroupModel? selectedAnalysisGroup;

  String? selectedAnalysisGroupTitle;
  AnalysisModel? selectedModel;

  TextEditingController sampleSearchController = TextEditingController();
  TextEditingController sampleUnitSearchController = TextEditingController();
  TextEditingController receiptDateController = TextEditingController();
  TextEditingController analysisWorkGroupSearchController =
      TextEditingController();
  TextEditingController analysisGroupSearchController = TextEditingController();
  TextEditingController analysisSubGroupSearchController =
      TextEditingController();
  TextEditingController priceController = TextEditingController();
  TextEditingController labToLabPriceController = TextEditingController();
  TextEditingController barcodeController = TextEditingController();
  TextEditingController refForMaleController = TextEditingController();
  TextEditingController refForFemaleController = TextEditingController();
  TextEditingController femaleLowLimitController = TextEditingController();
  TextEditingController maleLowLimitController = TextEditingController();
  TextEditingController femaleHightLimitController = TextEditingController();
  TextEditingController maleHightLimitController = TextEditingController();
  TextEditingController instructionSearchController = TextEditingController();
  TextEditingController externalLabSearchController = TextEditingController();
  TextEditingController externalLabPriceController = TextEditingController();

  String? currentSelected = '';

  @override
  void initState() {
    super.initState();
    //  FutureBuilder(
    //   future: AnalysisGroupModel.getAll().then((value) {
    //     analysisGroupModels.clear();
    //     analysisGroupModels.addAll(value);
    //     ThisPageSecondUpdater().add('');
    //   }),
    //   builder: (context, s) => const SizedBox(),
    // ),
    // FutureBuilder(
    //   future: AnalysisSubGroupModel.getAll().then((value) {
    //     analysisSubGroupModels.clear();
    //     analysisSubGroupModels.addAll(value);
    //     ThisPageSecondUpdater().add('');
    //   }),
    //   builder: (context, s) => const SizedBox(),
    // ),
    // FutureBuilder(
    //   future: AnalysisWorkGroupModel.getAll().then((value) {
    //     analysisWorkGroupModels.clear();
    //     analysisWorkGroupModels.addAll(value);
    //     ThisPageSecondUpdater().add('');
    //   }),
    //   builder: (context, s) => const SizedBox(),
    // ),
    // FutureBuilder(
    //   future: AnalysisSampleModel.getAll().then((value) {
    //     analysisSampleModels.clear();
    //     analysisSampleModels.addAll(value);
    //     ThisPageSecondUpdater().add('');
    //   }),
    //   builder: (context, s) => const SizedBox(),
    // ),
    // FutureBuilder(
    //   future: ExternalLabModel.getAll().then((value) {
    //     externalLabModels.clear();
    //     externalLabModels.addAll(value);
    //     ThisPageSecondUpdater().add('');
    //   }),
    //   builder: (context, s) => const SizedBox(),
    // ),
    // FutureBuilder(
    //   future: InstructionModel.getAll().then((value) {
    //     instructionModels.clear();
    //     instructionModels.addAll(value);
    //     ThisPageSecondUpdater().add('');
    //   }),
    //   builder: (context, s) => const SizedBox(),
    // );
    // FutureBuilder(
    //   future: AnalysisSampleUnitModel.getAll().then((value) {
    //     analysisSampleUnitModels.clear();
    //     analysisSampleUnitModels.addAll(value);
    //     ThisPageSecondUpdater().add('');
    //   }),
    //   builder: (context, s) => const SizedBox(),
    // );
    getAwaiters();
  }

  void getAwaiters() async {
    await InstructionModel.getAll().then((value) {
      instructionModels.clear();
      instructionModels.addAll(value);
      ThisPageSecondUpdater().add('');
    });
    await ExternalLabModel.getAll().then((value) {
      externalLabModels.clear();
      externalLabModels.addAll(value);
      ThisPageSecondUpdater().add('');
    });
    await AnalysisGroupModel.getAll().then((value) {
      analysisGroupModels.clear();
      analysisGroupModels.addAll(value);
      ThisPageSecondUpdater().add('');
    });
    await AnalysisSampleModel.getAll().then((value) {
      analysisSampleModels.clear();
      analysisSampleModels.addAll(value);
      ThisPageSecondUpdater().add('');
    });
    await AnalysisSubGroupModel.getAll().then((value) {
      analysisSubGroupModels.clear();
      analysisSubGroupModels.addAll(value);
      ThisPageSecondUpdater().add('');
    });
    await AnalysisWorkGroupModel.getAll().then((value) {
      analysisWorkGroupModels.clear();
      analysisWorkGroupModels.addAll(value);
      ThisPageSecondUpdater().add('');
    });
    await AnalysisSampleUnitModel.getAll().then((value) {
      analysisSampleUnitModels.clear();
      analysisSampleUnitModels.addAll(value);
      analysisSampleUnit = analysisSampleUnitModels.first;
      ThisPageSecondUpdater().add('');
    });
    ThisPageSecondUpdater().add('');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('التحاليل'),
      ),
      body: Padding(
        padding: const EdgeInsets.fromLTRB(16, 8, 16, 8),
        child: Row(
          children: [
            Expanded(
              child: SingleChildScrollView(
                controller: ScrollController(),
                child: updater.UpdaterBlocWithoutDisposer(
                  updater: ThisPageSecondUpdater(
                    init: '',
                    updateForCurrentEvent: true,
                  ),
                  update: (context, s) {
                    return Column(
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: FocusableField(
                                descriptionController,
                                FocusNode(),
                                'الاسم',
                                (text) {
                                  return true;
                                },
                                null,
                                null,
                                null,
                                false,
                              ),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            Expanded(
                              flex: 2,
                              child: Column(
                                children: [
                                  // NFocusableField(
                                  //   controller: sampleSearchController,
                                  //   node: FocusNode(),
                                  //   labelTextWillBeTranslated: 'العينة',
                                  //   onSubmited: (text) { return true; },
                                  //   onChanged: (text) { return true; }, ),
                                  Row(
                                    children: [
                                      const Text(
                                        'العينة: ',
                                        style: TextStyle(
                                          fontSize: 18,
                                        ),
                                      ),
                                      Expanded(
                                        child: Padding(
                                          padding: const EdgeInsets.all(4.0),
                                          child: FormField<String>(
                                            builder:
                                                (FormFieldState<String> state) {
                                              return InputDecorator(
                                                decoration: InputDecoration(
                                                  hintText:
                                                      'Please select expense',
                                                  border: OutlineInputBorder(
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            5.0),
                                                  ),
                                                  contentPadding:
                                                      const EdgeInsets.all(0),
                                                ),
                                                child:
                                                    DropdownButtonHideUnderline(
                                                  child: DropdownButton<
                                                      AnalysisSampleModel>(
                                                    items: analysisSampleModels
                                                        .map((e) {
                                                      return DropdownMenuItem<
                                                          AnalysisSampleModel>(
                                                        value: e,
                                                        child:
                                                            Text(e.description),
                                                        onTap: () {
                                                          analysisSample = e;
                                                        },
                                                      );
                                                    }).toList(),
                                                    value: analysisSample,
                                                    onChanged: (value) {
                                                      if (value == null) {
                                                        return;
                                                      }
                                                      analysisSample = value;
                                                      ThisPageSecondUpdater()
                                                          .add('');
                                                    },
                                                  ),
                                                ),
                                              );
                                            },
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                  Row(
                                    children: [
                                      const Text(
                                        'وحدة العينة: ',
                                        style: TextStyle(
                                          fontSize: 18,
                                        ),
                                      ),
                                      Expanded(
                                        child: Padding(
                                          padding: const EdgeInsets.all(4.0),
                                          child: FormField<String>(
                                            builder:
                                                (FormFieldState<String> state) {
                                              return InputDecorator(
                                                decoration: InputDecoration(
                                                  hintText:
                                                      'Please select expense',
                                                  border: OutlineInputBorder(
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            5.0),
                                                  ),
                                                  contentPadding:
                                                      const EdgeInsets.all(0),
                                                ),
                                                child:
                                                    DropdownButtonHideUnderline(
                                                  child: DropdownButton<
                                                      AnalysisSampleUnitModel>(
                                                    items:
                                                        analysisSampleUnitModels
                                                            .map((e) {
                                                      return DropdownMenuItem<
                                                          AnalysisSampleUnitModel>(
                                                        value: e,
                                                        child:
                                                            Text(e.description),
                                                        onTap: () {
                                                          analysisSampleUnit =
                                                              e;
                                                        },
                                                      );
                                                    }).toList(),
                                                    value: analysisSampleUnit,
                                                    onChanged: (value) {
                                                      if (value == null) {
                                                        return;
                                                      }
                                                      analysisSampleUnit =
                                                          value;
                                                      ThisPageSecondUpdater()
                                                          .add('');
                                                    },
                                                  ),
                                                ),
                                              );
                                            },
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                            Expanded(
                              child: Column(
                                children: [
                                  NFocusableField(
                                    controller: receiptDateController,
                                    node: FocusNode(),
                                    labelTextWillBeTranslated: 'الاستلام بعد',
                                    onSubmited: (text) {
                                      return true;
                                    },
                                    onChanged: (text) {
                                      return true;
                                    },
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 16),
                        Row(
                          children: [
                            Expanded(
                              flex: 2,
                              child: Column(
                                children: [
                                  Row(
                                    children: [
                                      const Text(
                                        'المجموعة الاساسية: ',
                                        style: TextStyle(
                                          fontSize: 18,
                                        ),
                                      ),
                                      Expanded(
                                        child: Padding(
                                          padding: const EdgeInsets.all(4.0),
                                          child: FormField<String>(
                                            builder:
                                                (FormFieldState<String> state) {
                                              return InputDecorator(
                                                decoration: InputDecoration(
                                                  hintText:
                                                      'Please select expense',
                                                  border: OutlineInputBorder(
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            5.0),
                                                  ),
                                                  contentPadding:
                                                      const EdgeInsets.all(0),
                                                ),
                                                child:
                                                    DropdownButtonHideUnderline(
                                                  child: DropdownButton<String>(
                                                    items: analysisGroupModels
                                                        .map((e) {
                                                      return DropdownMenuItem<
                                                          String>(
                                                        value: e.title,
                                                        child: Text(e.title),
                                                        onTap: () {
                                                          analysisGroup = e;
                                                        },
                                                      );
                                                    }).toList(),
                                                    value:
                                                        selectedAnalysisGroupTitle,
                                                    onChanged: (value) {
                                                      if (value == null) {
                                                        return;
                                                      }
                                                      selectedAnalysisGroupTitle =
                                                          value;
                                                      ThisPageSecondUpdater()
                                                          .add('');
                                                    },
                                                  ),
                                                ),
                                              );
                                            },
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                  Row(
                                    children: [
                                      const Text(
                                        'المجموعة الفرعية: ',
                                        style: TextStyle(
                                          fontSize: 18,
                                        ),
                                      ),
                                      Expanded(
                                        child: Padding(
                                          padding: const EdgeInsets.all(4.0),
                                          child: FormField<String>(
                                            builder:
                                                (FormFieldState<String> state) {
                                              return InputDecorator(
                                                decoration: InputDecoration(
                                                  hintText:
                                                      'Please select expense',
                                                  border: OutlineInputBorder(
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            5.0),
                                                  ),
                                                  contentPadding:
                                                      const EdgeInsets.all(0),
                                                ),
                                                child:
                                                    DropdownButtonHideUnderline(
                                                  child: DropdownButton<
                                                      AnalysisSubGroupModel>(
                                                    items:
                                                        analysisSubGroupModels
                                                            .map((e) {
                                                      return DropdownMenuItem<
                                                          AnalysisSubGroupModel>(
                                                        value: e,
                                                        child: Text(e.title),
                                                        onTap: () {
                                                          analysisSubGroup = e;
                                                        },
                                                      );
                                                    }).toList(),
                                                    value: analysisSubGroup,
                                                    onChanged: (value) {
                                                      if (value == null) {
                                                        return;
                                                      }
                                                      analysisSubGroup = value;
                                                      ThisPageSecondUpdater()
                                                          .add('');
                                                    },
                                                  ),
                                                ),
                                              );
                                            },
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                  SpecField1<AnalysisWorkGroupModel>(
                                    defaultValue: analysisWorkGroup,
                                    fieldController:
                                        analysisWorkGroupSearchController,
                                    fieldLabel: 'السعر',
                                    listOfT: analysisWorkGroupModels,
                                    onTap: (e) {
                                      analysisWorkGroup = e;
                                      ThisPageSecondUpdater().add('');
                                    },
                                    titleRetriver: (e) {
                                      return e.title;
                                    },
                                  ),
                                  // Row(
                                  //   children: [
                                  //     const Text(
                                  //       'مجموعة العمل: ',
                                  //       style: TextStyle(
                                  //         fontSize: 18,
                                  //       ),
                                  //     ),
                                  //     Expanded(
                                  //       child: Padding(
                                  //         padding: const EdgeInsets.all(4.0),
                                  //         child: Stack(
                                  //           children: [
                                  //             FormField<String>(
                                  //               builder: (FormFieldState<String>
                                  //                   state) {
                                  //                 return InputDecorator(
                                  //                   decoration: InputDecoration(
                                  //                     hintText:
                                  //                         'Please select expense',
                                  //                     border:
                                  //                         OutlineInputBorder(
                                  //                       borderRadius:
                                  //                           BorderRadius
                                  //                               .circular(5.0),
                                  //                     ),
                                  //                     contentPadding:
                                  //                         const EdgeInsets.all(
                                  //                             0),
                                  //                   ),
                                  //                   child:
                                  //                       DropdownButtonHideUnderline(
                                  //                     child: DropdownButton<
                                  //                         AnalysisWorkGroupModel>(
                                  //                       items:
                                  //                           analysisWorkGroupModels
                                  //                               .map((e) {
                                  //                         return DropdownMenuItem<
                                  //                             AnalysisWorkGroupModel>(
                                  //                           value: e,
                                  //                           child:
                                  //                               Text(e.title),
                                  //                           onTap: () {
                                  //                             analysisWorkGroup =
                                  //                                 e;
                                  //                             ThisPageSecondUpdater()
                                  //                                 .add('');
                                  //                           },
                                  //                         );
                                  //                       }).toList(),
                                  //                       value:
                                  //                           analysisWorkGroup,
                                  //                       onChanged: (value) {
                                  //                         // if (value == null) { return; }
                                  //                         // analysisWorkGroup =  value;
                                  //                       },
                                  //                     ),
                                  //                   ),
                                  //                 );
                                  //               },
                                  //             ),
                                  //             Row(
                                  //               children: [
                                  //                 Expanded(
                                  //                   child: Container(
                                  //                     decoration: BoxDecoration(
                                  //                       borderRadius:
                                  //                           BorderRadius
                                  //                               .circular(5),
                                  //                       color: Colors.grey[900],
                                  //                     ),
                                  //                     child: NFocusableField(
                                  //                       controller:
                                  //                           priceController,
                                  //                       node: FocusNode(),
                                  //                       margin: const EdgeInsets
                                  //                           .all(0),
                                  //                       labelTextWillBeTranslated:
                                  //                           'السعر',
                                  //                       onSubmited: (text) {
                                  //                         FocusNode()
                                  //                             .requestFocus();
                                  //                         return true;
                                  //                       },
                                  //                       onChanged: (text) {
                                  //                         return true;
                                  //                       },
                                  //                     ),
                                  //                   ),
                                  //                 ),
                                  //                 const SizedBox(width: 30),
                                  //               ],
                                  //             ),
                                  //           ],
                                  //         ),
                                  //       ),
                                  //     ),
                                  //   ],
                                  // ),

                                  // NFocusableField(
                                  //   controller: sampleSearchController,
                                  //   node: FocusNode(),
                                  //   labelTextWillBeTranslated: '',
                                  //   onSubmited: (text) {
                                  //     return true;
                                  //   },
                                  //   onChanged: (text) {
                                  //     return true;
                                  //   },
                                  // ),
                                  // NFocusableField(
                                  //   controller: sampleSearchController,
                                  //   node: FocusNode(),
                                  //   labelTextWillBeTranslated: '',
                                  //   onSubmited: (text) {
                                  //     return true;
                                  //   },
                                  //   onChanged: (text) {
                                  //     return true;
                                  //   },
                                  // ),
                                  // NFocusableField(
                                  //   controller: sampleSearchController,
                                  //   node: FocusNode(),
                                  //   labelTextWillBeTranslated: '',
                                  //   onSubmited: (text) {
                                  //     return true;
                                  //   },
                                  //   onChanged: (text) {
                                  //     return true;
                                  //   },
                                  // ),
                                ],
                              ),
                            ),
                            Expanded(
                              child: Column(
                                children: [
                                  NFocusableField(
                                    controller: priceController,
                                    node: FocusNode(),
                                    labelTextWillBeTranslated: 'السعر',
                                    onSubmited: (text) {
                                      FocusNode().requestFocus();
                                      return true;
                                    },
                                    onChanged: (text) {
                                      return true;
                                    },
                                  ),
                                  NFocusableField(
                                    controller: labToLabPriceController,
                                    node: FocusNode(),
                                    labelTextWillBeTranslated: 'سعر Lap to Lap',
                                    onSubmited: (text) {
                                      return true;
                                    },
                                    onChanged: (text) {
                                      return true;
                                    },
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            Expanded(
                              flex: 2,
                              child: Row(
                                children: [
                                  Expanded(
                                    flex: 3,
                                    child: Row(
                                      children: [
                                        const Text(
                                          'الجهة خارجية: ',
                                          style: TextStyle(
                                            fontSize: 18,
                                          ),
                                        ),
                                        Expanded(
                                          child: Padding(
                                            padding: const EdgeInsets.all(4.0),
                                            child: FormField<String>(
                                              builder: (FormFieldState<String>
                                                  state) {
                                                return InputDecorator(
                                                  decoration: InputDecoration(
                                                    hintText:
                                                        'Please select expense',
                                                    border: OutlineInputBorder(
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              5.0),
                                                    ),
                                                    contentPadding:
                                                        const EdgeInsets.all(0),
                                                  ),
                                                  child:
                                                      DropdownButtonHideUnderline(
                                                    child: DropdownButton<
                                                        ExternalLabModel>(
                                                      items: externalLabModels
                                                          .map((e) {
                                                        return DropdownMenuItem<
                                                            ExternalLabModel>(
                                                          value: e,
                                                          child: Text(e.title),
                                                          onTap: () {
                                                            externalLab = e;
                                                          },
                                                        );
                                                      }).toList(),
                                                      value: externalLab,
                                                      onChanged: (value) {
                                                        if (value == null) {
                                                          return;
                                                        }
                                                        externalLab = value;
                                                        ThisPageSecondUpdater()
                                                            .add('');
                                                      },
                                                    ),
                                                  ),
                                                );
                                              },
                                            ),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  // Expanded( flex: 2,
                                  //   child: NFocusableField(
                                  //     controller: sampleSearchController,
                                  //     node: FocusNode(),
                                  //     labelTextWillBeTranslated: '',
                                  //     onSubmited: (text) { return true; },
                                  //     onChanged: (text) {
                                  //       return true; }, ), ),
                                  Expanded(
                                    child: NFocusableField(
                                      controller: externalLabPriceController,
                                      node: FocusNode(),
                                      labelTextWillBeTranslated: 'السعر',
                                      onSubmited: (text) {
                                        return true;
                                      },
                                      onChanged: (text) {
                                        return true;
                                      },
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            Expanded(
                              child: NFocusableField(
                                controller: barcodeController,
                                node: FocusNode(),
                                labelTextWillBeTranslated: 'الباركود',
                                onSubmited: (text) {
                                  return true;
                                },
                                onChanged: (text) {
                                  return true;
                                },
                              ),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            Expanded(
                              child: NFocusableField(
                                controller: instructionSearchController,
                                node: FocusNode(),
                                labelTextWillBeTranslated: 'Ref For Male Adult',
                                maxLines: 2,
                                minLines: 2,
                                onSubmited: (text) {
                                  return true;
                                },
                                onChanged: (text) {
                                  return true;
                                },
                              ),
                            ),
                            Expanded(
                              child: NFocusableField(
                                controller: instructionSearchController,
                                node: FocusNode(),
                                labelTextWillBeTranslated:
                                    'Ref For Female Adult',
                                onSubmited: (text) {
                                  return true;
                                },
                                onChanged: (text) {
                                  return true;
                                },
                              ),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            Expanded(
                              child: NFocusableField(
                                controller: refForFemaleController,
                                node: FocusNode(),
                                labelTextWillBeTranslated: 'Ref For Male Child',
                                maxLines: 2,
                                minLines: 2,
                                onSubmited: (text) {
                                  return true;
                                },
                                onChanged: (text) {
                                  return true;
                                },
                              ),
                            ),
                            Expanded(
                              child: NFocusableField(
                                controller: refForMaleController,
                                node: FocusNode(),
                                labelTextWillBeTranslated:
                                    'Ref For Female Child',
                                onSubmited: (text) {
                                  return true;
                                },
                                onChanged: (text) {
                                  return true;
                                },
                              ),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            Expanded(
                              child: Row(
                                children: [
                                  Expanded(
                                    child: Row(
                                      children: [
                                        const Icon(Icons.arrow_upward),
                                        Expanded(
                                          child: NFocusableField(
                                            controller:
                                                instructionSearchController,
                                            node: FocusNode(),
                                            labelTextWillBeTranslated:
                                                'High Limit',
                                            onSubmited: (text) {
                                              return true;
                                            },
                                            onChanged: (text) {
                                              return true;
                                            },
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  Expanded(
                                    child: Row(
                                      children: [
                                        const Icon(Icons.arrow_downward),
                                        Expanded(
                                          child: NFocusableField(
                                            controller:
                                                instructionSearchController,
                                            node: FocusNode(),
                                            labelTextWillBeTranslated:
                                                'Low Limit',
                                            onSubmited: (text) {
                                              return true;
                                            },
                                            onChanged: (text) {
                                              return true;
                                            },
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            Expanded(
                              child: Row(
                                children: [
                                  Expanded(
                                    child: Row(
                                      children: [
                                        const Icon(Icons.arrow_upward),
                                        Expanded(
                                          child: NFocusableField(
                                            controller:
                                                instructionSearchController,
                                            node: FocusNode(),
                                            labelTextWillBeTranslated:
                                                'High Limit',
                                            onSubmited: (text) {
                                              return true;
                                            },
                                            onChanged: (text) {
                                              return true;
                                            },
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  Expanded(
                                    child: Row(
                                      children: [
                                        const Icon(Icons.arrow_downward),
                                        Expanded(
                                          child: NFocusableField(
                                            controller:
                                                instructionSearchController,
                                            node: FocusNode(),
                                            labelTextWillBeTranslated:
                                                'Low Limit',
                                            onSubmited: (text) {
                                              return true;
                                            },
                                            onChanged: (text) {
                                              return true;
                                            },
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            Expanded(
                              child: NFocusableField(
                                controller: instructionSearchController,
                                node: FocusNode(),
                                labelTextWillBeTranslated: 'ملاحظة',
                                onSubmited: (text) {
                                  return true;
                                },
                                onChanged: (text) {
                                  return true;
                                },
                              ),
                            ),
                          ],
                        ),
                        SizedBox(
                          // height: 100,
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceAround,
                            children: [
                              Padding(
                                padding: const EdgeInsets.all(8.0),
                                child: MaterialButton(
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  height: 50,
                                  color: Colors.black87,
                                  onPressed: selectedModel == null
                                      ? null
                                      : () async {
                                          await selectedModel!.deleteWithMID();
                                          selectedModel = null;
                                          ThisPageUpdater().add('');
                                          ThisPageSecondUpdater().add('');
                                        },
                                  child: const Text('حذف'),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.all(8.0),
                                child: MaterialButton(
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  height: 50,
                                  color: Colors.black87,
                                  onPressed: selectedModel == null
                                      ? null
                                      : () async {
                                          selectedModel!.description =
                                              descriptionController.text;
                                          selectedModel!.analysisGroup =
                                              analysisGroup!;
                                          selectedModel!.analysisSubGroup =
                                              analysisSubGroup!;
                                          selectedModel!.analysisWorkGroup =
                                              analysisWorkGroup!;
                                          print(selectedModel!
                                              .analysisGroup.title);
                                          await selectedModel!.edit();
                                          ThisPageUpdater().add('');
                                          ThisPageSecondUpdater().add('');
                                        },
                                  child: const Text('تعديل'),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.all(8.0),
                                child: MaterialButton(
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  height: 50,
                                  minWidth: 120,
                                  color: Colors.black87,
                                  onPressed: saveAnalysis,
                                  child: const Text('اضافة'),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    );
                  },
                ),
              ),
            ),
            Expanded(
              child: Column(
                children: [
                  updater.UpdaterBlocWithoutDisposer(
                    updater: ThisPageUpdater(
                      init: '',
                      updateForCurrentEvent: true,
                    ),
                    update: (context, s) {
                      return Expanded(
                        child: FutureBuilder<List<AnalysisModel>>(
                          future: AnalysisModel.getAll(),
                          builder: (context, snapshot) {
                            if (snapshot.hasError) {
                              return Center(
                                child: Text(
                                  'عذرا حدث خطأ ما: ${snapshot.error}',
                                  style: const TextStyle(
                                    fontSize: 20,
                                  ),
                                ),
                              );
                            }
                            if (snapshot.hasData && snapshot.data!.isNotEmpty) {
                              models = (snapshot.data!);
                              return ListView.builder(
                                itemCount: models.length,
                                itemBuilder: (context, index) {
                                  var model = models[index];
                                  return InkWell(
                                    onTap: () {
                                      selectedModel = model;
                                      descriptionController.text =
                                          model.description;
                                      analysisGroup = model.analysisGroup;
                                      selectedAnalysisGroupTitle =
                                          model.analysisGroup.title;
                                      ThisPageSecondUpdater().add('');
                                    },
                                    child: Card(
                                      child: Padding(
                                        padding: const EdgeInsets.fromLTRB(
                                            8, 4, 8, 4),
                                        child: Text(model.description),
                                      ),
                                    ),
                                  );
                                },
                              );
                            }
                            if (snapshot.connectionState ==
                                ConnectionState.waiting) {
                              return const Center(
                                  child: CircularProgressIndicator());
                            } else {
                              return const Center(
                                child: Text(
                                  'لا يوجد بيانات لعرضها',
                                  style: TextStyle(
                                    fontSize: 24,
                                  ),
                                ),
                              );
                            }
                          },
                        ),
                      );
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  saveAnalysis() async {
    var labAnalysisId = await ProcessesModel.stored!.requestLabAnalysisId();
    var id = int.tryParse(idController.text.isNotEmpty
        ? idController.text
        : labAnalysisId.toString());
    if (descriptionController.text.isEmpty) {
      return;
    }
    if (id == null) {
      toast('لا يمكنك ترك المعرف فارغا');
      return;
    }
    var model = AnalysisModel(
      id,
      description: descriptionController.text,
    );

    if (analysisSample == null) {
      analysisSampleWanted = 'عليك بملء المجال';
      return;
    }
    if (analysisSampleUnit == null) {
      analysisSampleUnitWanted = 'عليك بملء المجال';
      return;
    }
    if (analysisGroup == null) {
      analysisGroupWanted = 'عليك بملء المجال';
      return;
    }
    if (analysisSubGroup == null) {
      analysisSubGroupWanted = 'عليك بملء المجال';
      return;
    }
    if (analysisWorkGroup == null) {
      analysisWorkGroupWanted = 'عليك بملء المجال';
      return;
    }
    if (barcode == null) {
      barcodeWanted = 'عليك بملء المجال';
      return;
    }
    if (instruction == null) {
      instructionWanted = 'عليك بملء المجال';
      return;
    }
    if (externalLab == null) {
      externalLabWanted = 'عليك بملء المجال';
      return;
    }
    if (femaleRefHightLimit == null) {
      femaleRefHightLimitWanted = 'عليك بملء المجال';
      return;
    }
    if (femaleRefLowLimit == null) {
      femaleRefLowLimitWanted = 'عليك بملء المجال';
      return;
    }
    if (maleRefHightLimit == null) {
      maleRefHightLimitWanted = 'عليك بملء المجال';
      return;
    }
    if (maleRefLowLimit == null) {
      maleRefLowLimitWanted = 'عليك بملء المجال';
      return;
    }

    model.description = description;
    model.receiptDate = receiptDate;
    model.analysisSample = analysisSample!;
    model.analysisSampleUnit = analysisSampleUnit!;
    model.analysisGroup = analysisGroup!;
    model.analysisSubGroup = analysisSubGroup!;
    model.analysisWorkGroup = analysisWorkGroup!;
    model.barcode = barcode!;
    model.instruction = instruction!;
    model.externalLab = externalLab!;
    model.femaleRefHightLimit = femaleRefHightLimit!;
    model.femaleRefLowLimit = femaleRefLowLimit!;
    model.maleRefHightLimit = maleRefHightLimit!;
    model.maleRefLowLimit = maleRefLowLimit!;
    model.price = price;
    model.labToLabPrice = labToLabPrice;
    model.sentToOtherLap = sentToOtherLap;
    model.refForFemale = refForFemale;
    model.refForMale = refForMale;
    await model.add();
    await ProcessesModel.stored!.edit();
    ThisPageUpdater().add(0);
    ThisPageSecondUpdater().add('');
  }

  late int id;
  AnalysisGroupModel? analysisGroup;
  AnalysisSubGroupModel? analysisSubGroup;
  AnalysisWorkGroupModel? analysisWorkGroup;
  AnalysisSampleModel? analysisSample;
  ExternalLabModel? externalLab;
  InstructionModel? instruction;
  AnalysisSampleUnitModel? analysisSampleUnit;
  late String description;
  late double price;
  late double labToLabPrice;
  late int receiptDate;
  String? barcode;
  late String refForMale;
  late String refForFemale;
  late bool sentToOtherLap;
  int? femaleRefLowLimit;
  int? femaleRefHightLimit;
  int? maleRefLowLimit;
  int? maleRefHightLimit;

  String? analysisSampleWanted;
  String? analysisSampleUnitWanted;
  String? analysisGroupWanted;
  String? analysisSubGroupWanted;
  String? analysisWorkGroupWanted;
  String? barcodeWanted;
  String? instructionWanted;
  String? externalLabWanted;
  String? femaleRefHightLimitWanted;
  String? femaleRefLowLimitWanted;
  String? maleRefHightLimitWanted;
  String? maleRefLowLimitWanted;
}

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('مجموعات التحاليل'),
//       ),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           children: [
//             Expanded(
//               child: FutureBuilder(
//                 future: AnalysisGroupModel.getAll(),
//                 builder: (context, snapshot) {
//                   if (snapshot.hasError) {
//                     return Center(
//                       child: Text(
//                         'عذرا حدث خطأ ما: ${snapshot.error}',
//                         style: const TextStyle(
//                           fontSize: 20,
//                         ),
//                       ),
//                     );
//                   }
//                   if (snapshot.hasData) {
//                     return Column(
//                       children: [],
//                     );
//                   }
//                   if (snapshot.connectionState == ConnectionState.waiting) {
//                     return const Center(child: CircularProgressIndicator());
//                   } else {
//                     return const Center(
//                       child: Text('لا يوجد بيانات لعرضها'),
//                     );
//                   }
//                 },
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }

 // Column(
                      //   children: [
                      //     DropdownButton<String>(
                      //       items: groups.map((e) {
                      //         return DropdownMenuItem<String>(
                      //           value: e.title,
                      //           child: Text(e.title),
                      //           onTap: () {
                      //             selectedAnalysisGroup = e;
                      //           },
                      //         );
                      //       }).toList(),
                      //       value: selectedAnalysisGroupTitle,
                      //       onChanged: (value) {
                      //         if (value == null) {
                      //           return;
                      //         }
                      //         selectedAnalysisGroupTitle = value;
                      //         ThisPageSecondUpdater().add('');
                      //       },
                      //     ),
                      //     DropdownButton<String>(
                      //       items: groups.map((e) {
                      //         return DropdownMenuItem<String>(
                      //           value: e.title,
                      //           child: Text(e.title),
                      //           onTap: () {
                      //             selectedAnalysisGroup = e;
                      //           },
                      //         );
                      //       }).toList(),
                      //       value: selectedAnalysisGroupTitle,
                      //       onChanged: (value) {
                      //         if (value == null) {
                      //           return;
                      //         }
                      //         selectedAnalysisGroupTitle = value;
                      //         ThisPageSecondUpdater().add('');
                      //       },
                      //     ),
                      //     DropdownButton<String>(
                      //       items: groups.map((e) {
                      //         return DropdownMenuItem<String>(
                      //           value: e.title,
                      //           child: Text(e.title),
                      //           onTap: () {
                      //             selectedAnalysisGroup = e;
                      //           },
                      //         );
                      //       }).toList(),
                      //       value: selectedAnalysisGroupTitle,
                      //       onChanged: (value) {
                      //         if (value == null) {
                      //           return;
                      //         }
                      //         selectedAnalysisGroupTitle = value;
                      //         ThisPageSecondUpdater().add('');
                      //       },
                      //     ),
                      //   ],
                      // ),

                        // Expanded(
                          //   child: FormField<String>(
                          //     builder: (FormFieldState<String> state) {
                          //       return InputDecorator(
                          //         decoration: InputDecoration(
                          //           errorStyle: const TextStyle(
                          //               color: Colors.redAccent,
                          //               fontSize: 16.0),
                          //           hintText: 'Please select expense',
                          //           border: OutlineInputBorder(
                          //             borderRadius: BorderRadius.circular(5.0),
                          //           ),
                          //         ),
                          //         isEmpty: currentSelected == '',
                          //         child: DropdownButtonHideUnderline(
                          //           child: DropdownButton<String>(
                          //             // value: '',
                          //             isDense: true,
                          //             onChanged: (newValue) {
                          //               setState(() {
                          //                 currentSelected = newValue;
                          //                 state.didChange(newValue);
                          //               });
                          //             },
                          //             items:
                          //                 ['_currencies'].map((String value) {
                          //               return DropdownMenuItem<String>(
                          //                 value: value,
                          //                 child: Text(value),
                          //               );
                          //             }).toList(),
                          //           ),
                          //         ),
                          //       );
                          //     },
                          //   ),
                          // ),
                          // DropdownButton<String>(
                          //   items: [
                          //     'group shfjnisdnpiqwndoinpoifn qwnoqis',
                          //   ].map((e) {
                          //     return DropdownMenuItem<String>(
                          //       value: e,
                          //       child: Text(e),
                          //       onTap: () {
                          //         // selectedAnalysisGroup = e;
                          //       },
                          //     );
                          //   }).toList(),
                          //   // value: '',
                          //   onChanged: (value) {
                          //     // if (value == null) {
                          //     //   return;
                          //     // }
                          //     // selectedAnalysisGroupTitle = value;
                          //     ThisPageSecondUpdater().add('');
                          //   },
                          // ),

                          